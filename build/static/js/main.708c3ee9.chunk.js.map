{"version":3,"sources":["api/fetchWeather.js","components/Search.jsx","api/fetchForecast.js","components/Heading/Heading.jsx","components/TempSection/FeelsLike.jsx","components/TempSection/Temp.jsx","components/TempSection/Range.jsx","components/TempSection/TempSection.jsx","components/WeatherDetails/Info.jsx","components/WeatherDetails/DataTable/WindDirection.jsx","components/WeatherDetails/DataTable/DataTable.jsx","components/WeatherDetails/WeatherDetails.jsx","components/WeatherCard.jsx","App.js","index.js"],"names":["fetchWeather","query","a","axios","get","params","q","units","appid","process","data","Search","setQuery","handleFetchWeather","search","e","key","Error","alert","type","className","placeholder","value","onChange","target","onKeyPress","URL","API_KEY","fetchForecast","lat","lon","exclude","Heading","cityName","countryName","FeelsLike","feelsLike","Math","round","Temp","temp","Range","lowTemp","highTemp","style","color","TempSection","tempObj","feels_like","temp_max","temp_min","Info","icon","description","alt","src","WindDirection","direction","convertToCardinalDirection","DataTable","forecastObj","humidity","windObj","rainChance","precipitation","speed","deg","WeatherDetails","infoObj","WeatherCard","weatherObj","useState","forecast","setForecast","coord","forecastCoords","forecastData","console","log","useEffect","handleFetchForecast","name","sys","main","weather","wind","country","minutely","textAlign","fontSize","App","setWeather","LOCAL_STORAGE_KEY","weatherJSON","localStorage","getItem","JSON","parse","defaultCall","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.708c3ee9.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n\r\nexport const fetchWeather = async (query) => {\r\n\tconst { data } = await axios.get(URL, {\r\n\t\tparams: {\r\n\t\t\tq: query,\r\n\t\t\tunits: 'imperial',\r\n\t\t\tappid: API_KEY,\r\n\t\t},\r\n\t});\r\n\treturn data;\r\n};\r\n","function Search({ query, setQuery, handleFetchWeather }) {\r\n\tconst search = async (e) => {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\ttry {\r\n\t\t\t\thandleFetchWeather(query)\r\n\t\t\t} catch (Error) {\r\n\t\t\t\talert('Invalid City')\r\n\t\t\t}\r\n\t\t\tsetQuery('')\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<input\r\n\t\t\ttype='text'\r\n\t\t\tclassName='search_bar'\r\n\t\t\tplaceholder='Search..'\r\n\t\t\tvalue={query}\r\n\t\t\tonChange={(e) => setQuery(e.target.value)}\r\n\t\t\tonKeyPress={search}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default Search\r\n","import axios from 'axios'\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5/onecall'\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY\r\n\r\nexport const fetchForecast = async (lat, lon, exclude, units = 'imperial') => {\r\n\tconst { data } = await axios.get(URL, {\r\n\t\tparams: {\r\n\t\t\tlat: lat,\r\n\t\t\tlon: lon,\r\n\t\t\texclude: exclude,\r\n            units: units,\r\n\t\t\tappid: API_KEY,\r\n\t\t},\r\n\t})\r\n\treturn data\r\n}","export default function Heading({ cityName, countryName }) {\r\n\treturn (\r\n\t\t<section className='heading_section'>\r\n\t\t\t<h1 className='city'>{cityName}</h1>\r\n\t\t\t<sup className='city_sup accent-bg'>{countryName}</sup>\r\n\t\t</section>\r\n\t)\r\n}\r\n","\r\nexport default function FeelsLike({ feelsLike }) {\r\n\treturn (\t\t\t\r\n\t\t\t<p className='med_font'>\r\n\t\t\t\t{Math.round(feelsLike)}\r\n\t\t\t\t<sup>&deg;F</sup>\r\n\t\t\t</p>\r\n\t\r\n\t);\r\n}\r\n\r\n","import FeelsLike from './FeelsLike';\r\nexport default function Temp({ temp, feelsLike }) {\r\n\r\n\r\n\treturn (\r\n\t\t<div className='temps col'>\r\n\t\t\t<h3 className='big_font ' >\r\n\t\t\t\t{Math.round(temp)}\r\n\t\t\t\t<sup>&deg;F</sup>\r\n\t\t\t</h3>\r\n\t\t\t{feelsLike && (\r\n\t\t\t\t<p className='feelsLike med_font big_temp'>\r\n\t\t\t\t( <FeelsLike feelsLike={feelsLike}/> )\r\n\t\t\t\t</p>\r\n\t\t\t)}\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n","import { BiUpArrow, BiDownArrow } from 'react-icons/bi';\r\n\r\nfunction Range({ lowTemp, highTemp }) {\r\n\treturn (\r\n\t\t<section className='col'>\r\n\t\t\t<p className='med_font'>\r\n\t\t\t\t<BiUpArrow\r\n\t\t\t\t\tclassName='high arrow'\r\n\t\t\t\t\taria-label='High of'\r\n\t\t\t\t\tstyle={{ color: 'red' }}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t{Math.round(highTemp)}\r\n\t\t\t\t<sup>&deg;F</sup>\r\n\t\t\t</p>\r\n\t\t\t<p className='med_font'>\r\n\t\t\t\t<BiDownArrow\r\n\t\t\t\t\tclassName='arrow'\r\n\t\t\t\t\taria-label='Low of'\r\n\t\t\t\t\tstyle={{ color: 'blue' }}\r\n\t\t\t\t/>\r\n\t\t\t\t{Math.round(lowTemp)}\r\n\r\n\t\t\t\t<sup>&deg;F</sup>\r\n\t\t\t</p>\r\n\t\t</section>\r\n\t);\r\n}\r\n\r\nexport default Range;\r\n","import Temp from './Temp'\r\nimport Range from './Range'\r\n\r\nexport default function TempSection({ tempObj }) {\r\n\tconst { temp, feels_like, temp_max, temp_min } = tempObj\r\n\treturn (\r\n\t\t<section className='weather_card__section accent_bg'>\r\n\t\t\t{/* Current temp */}\r\n\t\t\t<Temp temp={temp} feelsLike={feels_like} />\r\n\t\t\t{/* Current Range */}\r\n\t\t\t<Range highTemp={temp_max} lowTemp={temp_min} />\r\n\t\t</section>\r\n\t)\r\n}\r\n","export default function Info({ icon, description }) {\r\n\treturn (\r\n\t\t<h2 className='weather-info col '>\r\n\t\t\t<img\r\n\t\t\t\tclassName='weather-info-icon '\r\n\t\t\t\talt={description}\r\n\t\t\t\tsrc={`https://openweathermap.org/img/wn/${icon}@2x.png`}\r\n\t\t\t/>\r\n\t\t\t<p className='reg_font cap'>{description}</p>\r\n\t\t\t\r\n\t\t</h2>\r\n\t);\r\n}\r\n\r\n\r\n","export default function WindDirection({ direction }) {\r\n\tconst convertToCardinalDirection = (direction) => {\r\n\t\tswitch (true) {\r\n\t\t\tcase direction === 0:\r\n\t\t\t\treturn (direction = 'E')\r\n\r\n\t\t\tcase direction === 90:\r\n\t\t\t\treturn (direction = 'N')\r\n\r\n\t\t\tcase direction === 180:\r\n\t\t\t\treturn (direction = 'W')\r\n\r\n\t\t\tcase direction === 270:\r\n\t\t\t\treturn (direction = 'S')\r\n\r\n\t\t\tcase 0 < direction < 90:\r\n\t\t\t\treturn (direction = 'NE')\r\n\r\n\t\t\tcase 90 > direction > 180:\r\n\t\t\t\treturn (direction = 'NW')\r\n\r\n\t\t\tcase 180 > direction > 270:\r\n\t\t\t\treturn (direction = 'SW')\r\n\r\n\t\t\tcase 270 > direction > 360:\r\n\t\t\t\treturn (direction = 'NW')\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn (direction = '')\r\n\t\t}\r\n\t}\r\n\treturn <>{convertToCardinalDirection(direction)}</>\r\n}\r\n","import WindDirection from './WindDirection'\r\n\r\nexport default function DataTable({ forecastObj, humidity, windObj }) {\r\n\tconst rainChance = forecastObj[0].precipitation\r\n\tconst { speed, deg } = windObj\r\n\r\n\treturn (\r\n\t\t<section className='detail reg_font col'>\r\n\t\t\t{forecastObj && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>Rain: {rainChance}%</p>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<p>Humidity {humidity}%</p>\r\n\r\n\t\t\t\t<p> </p>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t{speed} mph <WindDirection direction={deg} />\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t)\r\n}\r\n","import Info from './Info'\r\nimport DataTable from './DataTable/DataTable'\r\n\r\nexport default function WeatherDetails({\r\n\tinfoObj,\r\n\tforecastObj,\r\n\thumidity,\r\n\twindObj,\r\n}) {\r\n\tconst { description, icon } = infoObj[0]\r\n\r\n\treturn (\r\n\t\t<section className='weather_card__section accent_bg'>\r\n\t\t\t<Info icon={icon} description={description} />\r\n\t\t\t<DataTable forecastObj={forecastObj} humidity={humidity} windObj={windObj} />\r\n\t\t</section>\r\n\t)\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { fetchForecast } from '../api/fetchForecast'\r\n//Component Imports:\r\n\r\nimport Heading from './Heading/Heading'\r\n// import Alert from './Alert'\r\nimport TempSection from './TempSection/TempSection'\r\nimport WeatherDetails from './WeatherDetails/WeatherDetails'\r\n\r\nfunction WeatherCard({ weatherObj }) {\r\n\tconst [forecast, setForecast] = useState({})\r\n\r\n\tuseEffect(() => {\r\n\t\thandleFetchForecast(coord)\r\n\t\t//eslint-disable-next-line\r\n\t}, [weatherObj])\r\n\r\n\tasync function handleFetchForecast(coord) {\r\n\t\tconst forecastCoords = await coord\r\n\t\tconst { lat, lon } = forecastCoords\r\n\t\tconst forecastData = await fetchForecast(lat, lon)\r\n\t\tconsole.log(forecastData)\r\n\t\tsetForecast(forecastData)\r\n\t}\r\n\r\n\tconst { name, sys, main, weather, wind, coord } = weatherObj\r\n\tconst { humidity } = main\r\n\r\n\treturn (\r\n\t\t<main className='weather_card'>\r\n\t\t\t{/* City */}\r\n\r\n\t\t\t<Heading cityName={name} countryName={sys.country} />\r\n\r\n\t\t\t{/* Current weather info */}\r\n\t\t\t<TempSection tempObj={main} />\r\n\t\t\t{/* Additional Info */}\r\n\t\t\t{forecast.minutely && (\r\n\t\t\t\t<WeatherDetails\r\n\t\t\t\t\thumidity={humidity}\r\n\t\t\t\t\tinfoObj={weather}\r\n\t\t\t\t\twindObj={wind}\r\n\t\t\t\t\tforecastObj={forecast.minutely}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\r\n\t\t\t<p style={{ textAlign: 'right', fontSize: '0.75rem' }}>\r\n\t\t\t\t*Temperatures in parenthesis represent how the weather feels\r\n\t\t\t</p>\r\n\t\t</main>\r\n\t)\r\n}\r\n\r\nexport default WeatherCard\r\n","import { useState, useEffect } from 'react'\r\n//API\r\nimport { fetchWeather } from './api/fetchWeather'\r\n//Components\r\nimport Search from './components/Search'\r\nimport WeatherCard from './components/WeatherCard'\r\n//Style\r\nimport './index.css'\r\n\r\nconst App = () => {\r\n\tconst [query, setQuery] = useState('')\r\n\tconst [weather, setWeather] = useState({})\r\n\r\n\tconst LOCAL_STORAGE_KEY = 'mattsWeather.app.weather'\r\n\r\n\t//Local Storage Get Method\r\n\r\n\tuseEffect(() => {\r\n\t\tconst weatherJSON = localStorage.getItem(LOCAL_STORAGE_KEY)\r\n\t\tweatherJSON != null ? setWeather(JSON.parse(weatherJSON)) : defaultCall()\r\n\t\t//eslint-disable-next-line\r\n\t}, [])\r\n\t//Local Storage Set Method\r\n\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(weather))\r\n\t}, [weather])\r\n\r\n\t//Default data\r\n\tuseEffect(() => {\r\n\t\tdefaultCall()\r\n\t\t//eslint-disable-next-line\r\n\t}, [])\r\n\r\n\tconst defaultCall = () => {\r\n\t\tconst defaultQuery = 'Chicago'\r\n\t\thandleFetchWeather(defaultQuery)\r\n\t}\r\n\t//Logic for fetching weather\r\n\tconst handleFetchWeather = async (query) => {\r\n\t\tconst data = await fetchWeather(query)\r\n\t\tsetWeather(data)\r\n\t\tconsole.log(data)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='app_container'>\r\n\t\t\t<Search\r\n\t\t\t\tquery={query}\r\n\t\t\t\tsetQuery={setQuery}\r\n\t\t\t\thandleFetchWeather={handleFetchWeather}\r\n\t\t\t/>\r\n\t\t\t{weather.main && (\r\n\t\t\t\t<WeatherCard\r\n\t\t\t\t\tweatherObj={weather}\r\n\t\t\t\t\t// const {name, main, sys, weather} = weather\r\n\t\t\t\t\t// cityName={weather.name}\r\n\t\t\t\t\t// countryName={weather.sys.country}\r\n\t\t\t\t\t// currentDescription={weather.weather[0].description}\r\n\t\t\t\t\t// weatherImg={weather.weather[0].icon}\r\n\t\t\t\t\t// currentTemp={weather.main.temp}\r\n\t\t\t\t\t// lowTemp={weather.main.temp_min}\r\n\t\t\t\t\t// highTemp={weather.main.temp_max}\r\n\t\t\t\t\t// humidity={weather.main.humidity}\r\n\t\t\t\t\t// feelsLike={Math.round(weather.main.feels_like)}\r\n\t\t\t\t\t// windSpd={Math.round(weather.wind.speed)}\r\n\t\t\t\t\t// windDeg={weather.wind.deg}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}